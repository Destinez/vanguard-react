{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\n\nimport PhoneNumber from './PhoneNumber.js';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport RegExpCache from './findNumbers/RegExpCache.js';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util.js';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8.js';\nimport Leniency from './findNumbers/Leniency.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js';\nimport { isSupportedCountry } from './metadata.js';\nimport parseNumber from './parse_.js';\nvar EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching');\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"), // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"), // Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n    /** The iteration tristate. */\n\n    this.state = 'NOT_READY';\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n    this.searchIndex = 0; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n    // that use-case won't have a lot of benefit.\n\n    this.regExpCache = new RegExpCache(32);\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `substring`\r\n     * if the substring itself does not qualify as a match.\r\n     */\n\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(substring, offset, text) {\n      for (var _iterator = _createForOfIteratorHelperLoose(INNER_MATCHES), _step; !(_step = _iterator()).done;) {\n        var innerMatchPattern = _step.value;\n        var isFirstMatch = true;\n        var candidateMatch = void 0;\n        var innerMatchRegExp = new RegExp(innerMatchPattern, 'g');\n\n        while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));\n\n            var _match = this.parseAndVerify(_candidate, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a `candidate` start index,\n          // therefore resort to using this kind of an approximation.\n          // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\n          // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n\n          var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);\n          var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport { PhoneNumberMatcher as default };","map":{"version":3,"sources":["C:/Users/HP/Documents/code/Digital Switch/AAM-Templates/aam-volt/node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js"],"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","configurable","writable","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","PhoneNumber","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_PUNCTUATION","createExtensionPattern","RegExpCache","limit","trimAfterFirstMatch","_pL","_pN","pZ","PZ","pNd","Leniency","parsePreCandidate","isValidPreCandidate","isValidCandidate","LEAD_CLASS","isSupportedCountry","parseNumber","EXTN_PATTERNS_FOR_MATCHING","INNER_MATCHES","concat","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","RegExp","NON_DIGITS_PATTERN","MAX_SAFE_INTEGER","Number","Math","pow","PhoneNumberMatcher","text","undefined","options","metadata","defaultCallingCode","defaultCountry","leniency","extended","maxTries","state","searchIndex","regExpCache","find","matches","exec","candidate","offset","index","match","parseAndVerify","extractInnerMatch","v2","phoneNumber","country","countryCallingCode","phone","ext","startsAt","endsAt","number","substring","_iterator","_step","innerMatchPattern","isFirstMatch","candidateMatch","innerMatchRegExp","_candidate","_match","candidateIndexGuess","indexOf","possible","result","hasNext","lastMatch","Error","default"],"mappings":"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","sourcesContent":["function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\nimport PhoneNumber from './PhoneNumber.js';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport RegExpCache from './findNumbers/RegExpCache.js';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util.js';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8.js';\nimport Leniency from './findNumbers/Leniency.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js';\nimport { isSupportedCountry } from './metadata.js';\nimport parseNumber from './parse_.js';\nvar EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching');\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"), // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"), // Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n    /** The iteration tristate. */\n\n    this.state = 'NOT_READY';\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n    this.searchIndex = 0; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n    // that use-case won't have a lot of benefit.\n\n    this.regExpCache = new RegExpCache(32);\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `substring`\r\n     * if the substring itself does not qualify as a match.\r\n     */\n\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(substring, offset, text) {\n      for (var _iterator = _createForOfIteratorHelperLoose(INNER_MATCHES), _step; !(_step = _iterator()).done;) {\n        var innerMatchPattern = _step.value;\n        var isFirstMatch = true;\n        var candidateMatch = void 0;\n        var innerMatchRegExp = new RegExp(innerMatchPattern, 'g');\n\n        while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));\n\n            var _match = this.parseAndVerify(_candidate, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a `candidate` start index,\n          // therefore resort to using this kind of an approximation.\n          // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\n          // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n\n          var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);\n          var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport { PhoneNumberMatcher as default };\n//# sourceMappingURL=PhoneNumberMatcher.js.map"]},"metadata":{},"sourceType":"module"}