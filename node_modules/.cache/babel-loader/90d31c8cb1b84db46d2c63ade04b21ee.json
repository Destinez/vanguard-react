{"ast":null,"code":"/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}","map":{"version":3,"sources":["C:/Users/HP/Documents/code/Digital Switch/AAM-Templates/aam-volt/node_modules/libphonenumber-js/es6/findNumbers/util.js"],"names":["limit","lower","upper","TypeError","concat","trimAfterFirstMatch","regexp","string","index","search","slice","startsWith","substring","indexOf","endsWith","length"],"mappings":"AAAA;AACA,OAAO,SAASA,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6B;AAClC,MAAID,KAAK,GAAG,CAAR,IAAaC,KAAK,IAAI,CAAtB,IAA2BA,KAAK,GAAGD,KAAvC,EAA8C;AAC5C,UAAM,IAAIE,SAAJ,EAAN;AACD;;AAED,SAAO,IAAIC,MAAJ,CAAWH,KAAX,EAAkB,GAAlB,EAAuBG,MAAvB,CAA8BF,KAA9B,EAAqC,GAArC,CAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASG,mBAAT,CAA6BC,MAA7B,EAAqCC,MAArC,EAA6C;AAClD,MAAIC,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcH,MAAd,CAAZ;;AAEA,MAAIE,KAAK,IAAI,CAAb,EAAgB;AACd,WAAOD,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBF,KAAhB,CAAP;AACD;;AAED,SAAOD,MAAP;AACD;AACD,OAAO,SAASI,UAAT,CAAoBJ,MAApB,EAA4BK,SAA5B,EAAuC;AAC5C,SAAOL,MAAM,CAACM,OAAP,CAAeD,SAAf,MAA8B,CAArC;AACD;AACD,OAAO,SAASE,QAAT,CAAkBP,MAAlB,EAA0BK,SAA1B,EAAqC;AAC1C,SAAOL,MAAM,CAACM,OAAP,CAAeD,SAAf,EAA0BL,MAAM,CAACQ,MAAP,GAAgBH,SAAS,CAACG,MAApD,MAAgER,MAAM,CAACQ,MAAP,GAAgBH,SAAS,CAACG,MAAjG;AACD","sourcesContent":["/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}